using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using OfficeOpenXml;
using System.IO;
using System.Configuration;

public partial class Data_Export : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        TrustControl1.getUserRoles();
        if (!TrustControl1.isRole("ADMIN"))
        {
            if (Session["DEPTID"].ToString() != "7")    //Not IT & Cards
            {
                Response.Write("No Permission.<br><br><a href=''>Home</a>");
                Response.End();
            }
        }
        if (!IsPostBack)
        {
            SetDate_Today();
            RefreshControls();
        }

        Title = "Data Export to ITCL";
    }
    private void SetDate_Today()
    {
        TextBox1.Text = DateTime.Now.ToString("dd/MM/yyyy");
        TextBox2.Text = DateTime.Now.ToString("dd/MM/yyyy");
    }
    protected void headerLevelCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        CheckBox headerChkBox = ((CheckBox)GridView6.HeaderRow.FindControl("headerLevelCheckBox"));

        if (headerChkBox.Checked)
        {
            foreach (GridViewRow gvRow in GridView6.Rows)
            {
                CheckBox rowChkBox = ((CheckBox)gvRow.FindControl("rowLevelCheckBox"));
                rowChkBox.Checked = true;
            }
        }
        else
        {
            foreach (GridViewRow gvRow in GridView6.Rows)
            {
                CheckBox rowChkBox = ((CheckBox)gvRow.FindControl("rowLevelCheckBox"));
                rowChkBox.Checked = false;
            }
        }
    }
    protected void cmdExport_Click(object sender, EventArgs e)
    {
       
        if (lblTotalUnsent.Text == "0")
        {
            TrustControl1.ClientMsg("Nothing to Export.");
            return;
        }

        RefreshExportButton();

        SqlDataSource1.Select(DataSourceSelectArguments.Empty);        
    }
    protected void cmdExport1_Click(object sender, EventArgs e)
    {
        if (cboMaxRowsToSent1.SelectedIndex == 0)
        {
            TrustControl1.ClientMsg("Please select total export.");
            return;
        }
        else
        {
            try
            {
                string IDs = "";
                for (int i = 0; i < GridView6.Rows.Count; i++)
                {
                    CheckBox chk = (CheckBox)(GridView6.Rows[i].FindControl("rowLevelCheckBox"));
                    if (chk.Checked)
                    {
                        IDs += chk.Text + ",";
                    }
                }
                if (IDs.Length > 2)
                {
                    // IDs = IDs.Substring(1);
                    string Msg = "";
                    bool done = false;

                    using (SqlConnection conn = new SqlConnection())
                    {
                        string Query = "s_ExportToITCL_New";
                        conn.ConnectionString = ConfigurationManager.ConnectionStrings["CardDataConnectionString"].ConnectionString;

                        using (SqlCommand cmd = new SqlCommand())
                        {
                            cmd.CommandText = Query;
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            cmd.Parameters.Add("@IDs", System.Data.SqlDbType.VarChar, 8000).Value = IDs;
                            cmd.Parameters.Add("@EmpID", System.Data.SqlDbType.VarChar).Value = Session["EMPID"].ToString();
                            cmd.Parameters.Add("@CardType", System.Data.SqlDbType.VarChar).Value = DropDownList2.SelectedValue.ToString();
                            cmd.Parameters.Add("@MaxRowsToSent", System.Data.SqlDbType.BigInt).Value = cboMaxRowsToSent1.SelectedValue;

                            SqlParameter Sql_Msg = new SqlParameter("@Batch", System.Data.SqlDbType.VarChar, 255);
                            Sql_Msg.Direction = System.Data.ParameterDirection.InputOutput;
                            Sql_Msg.Value = Msg;
                            cmd.Parameters.Add(Sql_Msg);

                            cmd.Connection = conn;
                            conn.Open();

                            cmd.ExecuteNonQuery();
                            Msg = "Export Batch:" + string.Format("{0}", Sql_Msg.Value);
                        }
                    }

                    TrustControl1.ClientMsg(Msg);
                    GridView6.DataBind();

                }
                else
                    TrustControl1.ClientMsg("Please check mark id for issue.");

                //lblIDs.Text = IDs.Replace(",", ", ");
            }
            catch (Exception ex) { TrustControl1.ClientMsg(ex.Message); }
        }
    }

    protected void SqlDataSourceSearch_Deleted(object sender, SqlDataSourceStatusEventArgs e)
    {
        string Msg= e.Command.Parameters["@Msg"].Value.ToString();

        TrustControl1.ClientMsg(Msg);
        GridView5.DataBind();
    }

    private static string SortString(string Branches)
    {
        int[] i_Branches;
        List<int> ints = new List<int>();
        string[] strings = Branches.Split(',');

        foreach (string s in strings)
        {
            int i;
            if (int.TryParse(s.Trim(), out i))
            {
                ints.Add(i);
            }
        }
        i_Branches = ints.ToArray();

        Array.Sort(i_Branches);

        Branches = "";
        foreach (int s in i_Branches)
            Branches += "," + s.ToString();
        if (Branches.Length > 1)
        {
            Branches = Branches.Substring(1);
        }
        return Branches;
    }

    private string getCSV()
    {
        StringBuilder csv = new StringBuilder();
        DataView dv = (DataView)SqlDataSource1.Select(DataSourceSelectArguments.Empty);

        //csv.Append("\"File ID\",\"File Name\",\"Description\",\"Rack Name\",\"Status\"");
        //csv.Append(Environment.NewLine);

        for (int i = 0; i < dv.Table.Rows.Count; i++)
        {
            csv.Append(dv.Table.Rows[i][0]);
            csv.Append(Environment.NewLine);
        }
        return csv.ToString();
    }

    protected void cboCardType_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblSelectedBrances.Text = "";
        GridView3.DataBind();
        RefreshExportButton();
        chkSelectAllBranch.Checked = false;
    }   

    protected void Button1_Click(object sender, EventArgs e)
    {
        //MultiView1.SetActiveView(View5);
        //txtAccount.Focus();
        //txtAccount.Text = "";
        GridView5.DataBind();
    }
    protected void Button2_Click(object sender, EventArgs e)
    {      
        GridView6.DataBind();
    }
    protected void chkBranches_SelectedIndexChanged(object sender, EventArgs e)
    {
        string Branches = "";
        if (chkBranches.SelectedItem == null)
        {
            lblSelectedBrances.Text = "";
        }
        else
        {
            for (int i = 0; i < chkBranches.Items.Count; i++)
            {
                if (chkBranches.Items[i].Selected)
                    Branches += "," + chkBranches.Items[i].Value;
            }
            if (Branches.Length > 1)
            {
                Branches = SortString(Branches.Substring(1));
                lblSelectedBrances.Text = Branches.Replace(",", ", ");
            }
        }        
        RefreshExportButton();
    }

    protected void RefreshExportButton()
    {
        string oConnString = System.Configuration.ConfigurationManager.ConnectionStrings["CardDataConnectionString"].ConnectionString;
        SqlConnection oConn = new SqlConnection(oConnString);
        if (oConn.State == ConnectionState.Closed)
            oConn.Open();
        SqlCommand oCommand = new SqlCommand("EXEC sp_ExportToITCL_Get_Start_Ready_ID '" + cboCardType.SelectedItem.Value + "', '" + lblSelectedBrances.Text + "'", oConn);

        SqlDataReader oReader = oCommand.ExecuteReader();
        if (oReader.HasRows)
        {
            while (oReader.Read())
            {
                txtStartID.Text = oReader["StartID"].ToString();
                lblTotalUnsent.Text = oReader["TotalUnsent"].ToString();
                lblCardType.Text = cboCardType.SelectedItem.Value;
            }
        }
        cmdExport.Enabled = (int.Parse(lblTotalUnsent.Text) > 0 && lblCardType.Text.Trim() != "" && lblSelectedBrances.Text.Trim() != "" && cboMaxRowsToSent.SelectedItem.Value != "");

        lnkCsv.Visible = false;
        lnkXlsx.Visible = false;
        //cmdExportAsXLSX.Enabled = (int.Parse(lblTotalUnsent.Text) > 0 && lblCardType.Text.Trim() != "" && lblSelectedBrances.Text.Trim() != "" && cboMaxRowsToSent.SelectedItem.Value != "");
    }
    protected void GridView3_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        //TrustControl1.ClientMsg(e.CommandSource.ToString());
        
        if (e.CommandName == "CHECK")
        {            
            TrustControl1.ClientMsg(e.CommandArgument.ToString());
        }       
    }

    protected void chkBranchSelect_CheckedChanged1(object sender, EventArgs e)
    { 
        try
        {
            string Branches = "";
            for (int i = 0; i < GridView3.Rows.Count; i++)
            {
                CheckBox chk =(CheckBox)(GridView3.Rows[i].FindControl("chkBranchSelect"));
                if (chk.Checked)
                {
                    Branches += "," + chk.Text;
                }                
            }
            if (Branches.Length > 1)
                Branches = Branches.Substring(1);
            Branches = SortString(Branches);
            lblSelectedBrances.Text = Branches.Replace(",", ", ");
        }
        catch (Exception ex) { TrustControl1.ClientMsg(ex.Message); }
        RefreshExportButton();
    }
    //protected void cmdExportLogPerPage_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    GridView1.PageSize = int.Parse(cmdExportLogPerPage.Text);
    //}
    protected void GridView2_DataBound(object sender, EventArgs e)
    {
        try
        {
            int Total = 0;
            for (int i = 0; i < GridView2.Rows.Count; i++)
            {
                Total += int.Parse(GridView2.Rows[i].Cells[2].Text);
            }
            GridView2.FooterRow.Cells[2].Text = Total.ToString();

            for (int i = 0; i < GridView2.Rows.Count; i++)
            {
                Panel p1 = new Panel();
                p1.BackColor = System.Drawing.Color.White;
                p1.BorderColor = System.Drawing.Color.Gray;
                p1.BorderStyle = BorderStyle.Solid;
                p1.BorderWidth = Unit.Pixel(1);
                Panel pn = new Panel();
                double percentage = (100 * double.Parse(GridView2.Rows[i].Cells[2].Text)) / (double)Total;
                pn.Width = Unit.Percentage(percentage);
                GridView2.Rows[i].Cells[3].ToolTip = string.Format("{0:N2}%", percentage);
                pn.BackColor = System.Drawing.Color.Gray;
                pn.Controls.Add(new LiteralControl("&nbsp;"));
                p1.Controls.Add(pn);
                pn.Style.Add("margin", "1px");
                GridView2.Rows[i].Cells[3].Controls.Add(p1);
            }
        }
        catch (Exception) { }
    }
    protected void SqlDataSource4_Selected(object sender, SqlDataSourceStatusEventArgs e)
    {
        chkSelectAllBranch.Enabled = e.AffectedRows > 0;
    }
    protected void SqlDataSource6_Selected(object sender, SqlDataSourceStatusEventArgs e)
    {
        //chkSelectAllBranch.Enabled = e.AffectedRows > 0;
        lblmsg.Text = "Total Cards:" + e.AffectedRows.ToString();
        lblmsg.Visible = e.AffectedRows > 0;
        cmdExport1.Enabled= e.AffectedRows > 0;
    }
    protected void tabContainer_ActiveTabChanged(object sender, EventArgs e)
    {
        if (tabContainer.ActiveTabIndex == 0)
            GridView2.DataBind();
        else if (tabContainer.ActiveTabIndex == 1)
            GridView1.DataBind();
    }
    protected void chkSelectAllBranch_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            string Branches = "";
            for (int i = 0; i < GridView3.Rows.Count; i++)
            {
                CheckBox chk = (CheckBox)(GridView3.Rows[i].FindControl("chkBranchSelect"));
                chk.Checked = chkSelectAllBranch.Checked;
                if (chk.Checked)
                {
                    Branches += "," + chk.Text;
                }
            }
            if (Branches.Length > 1)
                Branches = Branches.Substring(1);
            Branches = SortString(Branches);
            lblSelectedBrances.Text = Branches.Replace(",", ", ");
        }
        catch (Exception ex) { TrustControl1.ClientMsg(ex.Message); }
        RefreshExportButton();
    }
    protected void GridView3_DataBound(object sender, EventArgs e)
    {
        chkSelectAllBranch.Enabled = GridView3.Rows.Count > 0;
    }

    public string AddLinkToBranches(object Branches, object Batch)
    {
        string Retval = "";
        //Retval = string.Format("{0}", Branches);
        string[] B = Branches.ToString().Split(',');
        foreach (string s in B)
            Retval += string.Format("<a href='Data_Export_Download.aspx?batch={1}&branches={0}' class='Link'>{0}</a>, ", s.Trim(), Batch);
        if (Retval.Trim().EndsWith(","))
            Retval = Retval.Substring(0, Retval.Length - 2);
        return Retval;
    }
    protected void cboMaxRowsToSent_SelectedIndexChanged(object sender, EventArgs e)
    {
        RefreshExportButton();
    }

    protected void cmdMarkAsSent_Click(object sender, EventArgs e)
    {

    }
    protected void GridView4_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName == "MarkAsSent")
        {
            //TrustControl1.ClientMsg(e.CommandArgument.ToString());

            string oConnString = System.Configuration.ConfigurationManager.ConnectionStrings["CardDataConnectionString"].ConnectionString;
            SqlConnection oConn = new SqlConnection(oConnString);
            
            SqlCommand oCommand = new SqlCommand("EXEC sp_CardProcess_Mark_as_Sent_Single '" + e.CommandArgument.ToString() + "', '" + Session["EMPID"].ToString() + "'", oConn);


            if (oConn.State == ConnectionState.Closed)
                oConn.Open();
            oCommand.ExecuteNonQuery();

            GridView4.DataBind();
        }    
    }
    protected void cmdExportAsXLSX_Click(object sender, EventArgs e)
    {
        try
        {
            string FileName = Path.GetTempFileName();
            //string BatchID = Request.QueryString["batch"].ToString();
            //FileName = "C:\\1.xlsx";
            FileInfo FI = new FileInfo(FileName);
            if (File.Exists(FileName)) File.Delete(FileName);

            using (ExcelPackage xlPackage = new ExcelPackage(FI))
            {
                ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.Add("Cards");
                int StartRow = 1;

                //Adding Title Row
                worksheet.Column(1).Width = 35;
                worksheet.Column(2).Width = 8;
                worksheet.Column(3).Width = 6;
                worksheet.Column(4).Width = 30;
                worksheet.Column(5).Width = 20;
                worksheet.Column(6).Width = 10;
                worksheet.Column(7).Width = 15;
                worksheet.Column(8).Width = 10;
                worksheet.Column(9).Width = 25;
                worksheet.Column(10).Width = 25;
                worksheet.Column(11).Width = 25;
                worksheet.Column(12).Width = 10;
                worksheet.Column(13).Width = 10;
                worksheet.Column(14).Width = 10;
                worksheet.Column(15).Width = 20;
                worksheet.Column(16).Width = 20;
                worksheet.Column(17).Width = 35;

                //worksheet.Cells["A1:C1"].Style.Font.Bold = true;

                //Adding Title Row
                worksheet.Cells[StartRow, 1].Value = "FIO";
                worksheet.Cells[StartRow, 2].Value = "SEX";
                worksheet.Cells[StartRow, 3].Value = "TITLE";
                worksheet.Cells[StartRow, 4].Value = "NAMEONCARD";
                worksheet.Cells[StartRow, 5].Value = "ACCOUNT";
                worksheet.Cells[StartRow, 6].Value = "ACCOUNTTP";
                worksheet.Cells[StartRow, 7].Value = "BIRTHDAY";
                worksheet.Cells[StartRow, 8].Value = "ACCTSTAT";
                worksheet.Cells[StartRow, 9].Value = "ADDRESS";
                worksheet.Cells[StartRow, 10].Value = "CORADDRESS";
                worksheet.Cells[StartRow, 11].Value = "RESADDRESS";
                worksheet.Cells[StartRow, 12].Value = "CNTRYREG";
                worksheet.Cells[StartRow, 13].Value = "CNTRYCONT";
                worksheet.Cells[StartRow, 14].Value = "CNTRYLIVE";
                worksheet.Cells[StartRow, 15].Value = "CELLPHONE";
                worksheet.Cells[StartRow, 16].Value = "PHONE";
                worksheet.Cells[StartRow, 17].Value = "CLIENTPROP";

                DataView DV = (DataView)SqlDataSource5.Select(DataSourceSelectArguments.Empty);
                int R = 0;
                for (int r = 0; r < DV.Table.Rows.Count; r++)
                {
                    R = StartRow + r + 1;
                    if (DV.Table.Rows[r]["FIO"] != DBNull.Value)
                        worksheet.Cells[R, 1].Value = DV.Table.Rows[r]["FIO"].ToString();
                    if (DV.Table.Rows[r]["SEX"] != DBNull.Value)
                        worksheet.Cells[R, 2].Value = DV.Table.Rows[r]["SEX"].ToString();
                    if (DV.Table.Rows[r]["TITLE"] != DBNull.Value)
                        worksheet.Cells[R, 3].Value = DV.Table.Rows[r]["TITLE"].ToString();
                    if (DV.Table.Rows[r]["NAMEONCARD"] != DBNull.Value)
                        worksheet.Cells[R, 4].Value = DV.Table.Rows[r]["NAMEONCARD"].ToString();
                    if (DV.Table.Rows[r]["ACCOUNT"] != DBNull.Value)
                        worksheet.Cells[R, 5].Value = DV.Table.Rows[r]["ACCOUNT"].ToString();

                    if (DV.Table.Rows[r]["ACCOUNTTP"] != DBNull.Value)
                    {
                        worksheet.Cells[R, 6].Value = DV.Table.Rows[r]["ACCOUNTTP"];
                    }

                    if (DV.Table.Rows[r]["BIRTHDAY"] != DBNull.Value)
                    {
                        worksheet.Cells[R, 7].Value = DV.Table.Rows[r]["BIRTHDAY"];
                        worksheet.Cells[R, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                    }

                    if (DV.Table.Rows[r]["ACCTSTAT"] != DBNull.Value)
                        worksheet.Cells[R, 8].Value = DV.Table.Rows[r]["ACCTSTAT"].ToString();
                    if (DV.Table.Rows[r]["ADDRESS"] != DBNull.Value)
                        worksheet.Cells[R, 9].Value = DV.Table.Rows[r]["ADDRESS"].ToString();
                    if (DV.Table.Rows[r]["CORADDRESS"] != DBNull.Value)
                        worksheet.Cells[R, 10].Value = DV.Table.Rows[r]["CORADDRESS"].ToString();
                    if (DV.Table.Rows[r]["RESADDRESS"] != DBNull.Value)
                        worksheet.Cells[R, 11].Value = DV.Table.Rows[r]["RESADDRESS"].ToString();
                    if (DV.Table.Rows[r]["CNTRYREG"] != DBNull.Value)
                        worksheet.Cells[R, 12].Value = DV.Table.Rows[r]["CNTRYREG"];
                    if (DV.Table.Rows[r]["CNTRYCONT"] != DBNull.Value)
                        worksheet.Cells[R, 13].Value = DV.Table.Rows[r]["CNTRYCONT"];
                    if (DV.Table.Rows[r]["CNTRYLIVE"] != DBNull.Value)
                        worksheet.Cells[R, 14].Value = DV.Table.Rows[r]["CNTRYLIVE"];
                    if (DV.Table.Rows[r]["CELLPHONE"] != DBNull.Value)
                        worksheet.Cells[R, 15].Value = DV.Table.Rows[r]["CELLPHONE"].ToString();
                    if (DV.Table.Rows[r]["PHONE"] != DBNull.Value)
                        worksheet.Cells[R, 16].Value = DV.Table.Rows[r]["PHONE"].ToString();
                    if (DV.Table.Rows[r]["CLIENTPROP"] != DBNull.Value)
                        worksheet.Cells[R, 17].Value = DV.Table.Rows[r]["CLIENTPROP"].ToString();
                    //worksheet.Cells[R, 2].Value = "4";
                    //worksheet.Cells[R, 3].Value = "1";
                }

                //worksheet.Cells["A1:C" + R].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;


                //Adding Properties
                xlPackage.Workbook.Properties.Title = "CARD_BATCH_" + cboCardType.SelectedItem.Value + "_" + txtStartID.Text.Trim() + "";
                xlPackage.Workbook.Properties.Author = "Ashik Iqbal (www.ashik.info)";
                xlPackage.Workbook.Properties.Company = "Trust Bank Limited";
                xlPackage.Workbook.Properties.LastModifiedBy = string.Format("{0} ({1})", Session["FULLNAME"], Session["EMAIL"]);

                xlPackage.Save();
            }


            //Reading File Content
            byte[] content = File.ReadAllBytes(FileName);
            File.Delete(FileName);

            //Downloading File
            Response.Clear();
            Response.ClearContent();
            Response.ClearHeaders();
            Response.ContentType = "application/ms-excel";
            Response.AddHeader("Content-Disposition", "attachment;filename=" + "CARD_BATCH_" + cboCardType.SelectedItem.Value + "_" + txtStartID.Text.Trim() + ".xlsx");
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            Response.BinaryWrite(content);
            Response.End();

        }
        catch (Exception ex)
        {
            TrustControl1.ClientMsg(ex.Message);
        }

    }
    protected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)
    {
        RefreshControls();
    }
    private void RefreshControls()
    {
        DateTime T = DateTime.Now.Date;
        DateTime S = T;
        DateTime E = T;

        if (DropDownList1.SelectedItem.Value == "Custom Range")
        {
            DropDownList1.BackColor = System.Drawing.Color.Transparent;
            TextBox1.Enabled = true;
            TextBox2.Enabled = true;
        }
        else
        {
            DropDownList1.BackColor = System.Drawing.Color.Yellow;

            switch (DropDownList1.SelectedItem.Value)
            {
                case "Today":
                    SetDate_Today();
                    break;
                case "Yesterday":
                    S = T.AddDays(-1);
                    E = T.AddDays(-1);
                    break;
                case "This Week":
                    S = T.AddDays(-int.Parse(T.DayOfWeek.ToString("d")));
                    E = T;
                    break;
                case "Last Week":
                    S = T.AddDays(-7 - int.Parse(T.DayOfWeek.ToString("d")));
                    E = S.AddDays(6);
                    break;
                case "This Month":
                    S = T.AddDays(-T.Day + 1);
                    E = T;
                    break;
                case "Last Month":
                    S = (T.AddDays(-T.Day + 1)).AddMonths(-1);
                    E = T.AddDays(-T.Day);
                    break;
                case "This Year":
                    S = T.AddDays(-T.DayOfYear + 1);
                    E = T;
                    break;
                case "Show All":
                    S = new DateTime(1900, 1, 1);
                    E = S;
                    break;
            }

            if (S == new DateTime(1900, 1, 1))
            {
                TextBox1.Text = "";
                TextBox2.Text = "";
            }
            else
            {
                TextBox1.Text = S.ToString("dd/MM/yyyy");
                TextBox2.Text = E.ToString("dd/MM/yyyy");
            }

            RefreshLabel();

            GridView1.DataBind();

            TextBox1.Enabled = false;
            TextBox2.Enabled = false;
        }
    }
    private void RefreshLabel()
    {
       
    }
    protected void btnSearch_Click(object sender, EventArgs e)
    {
        GridView1.DataBind();
    }
    protected void SqlDataSource1_Selected(object sender, SqlDataSourceStatusEventArgs e)
    {
        string BatchID = e.Command.Parameters["@Batch"].Value.ToString();
        string CardType = cboCardType.SelectedValue.ToString();

        lnkCsv.NavigateUrl = string.Format("Data_Export_Download.aspx?type=csv&batch={0}&CardType={1}", BatchID,CardType);
        lnkXlsx.NavigateUrl = string.Format("Data_Export_Download.aspx?type=xlsx&batch={0}&CardType={1}", BatchID, CardType);

        lnkCsv.Visible = true;
        lnkXlsx.Visible = true;
    }
    private decimal checkValue(string Value)
    {
        if (Value == "&nbsp;")
            return 0;
        else
            return decimal.Parse(Value);

    }
    protected void SqlDataSource2_Selected(object sender, SqlDataSourceStatusEventArgs e)
    {
        lblTotalReissue.Visible = e.AffectedRows > 0;
        string Total = "";
        Total = e.Command.Parameters["@TotalCards"].Value.ToString();
        lblTotalReissue.Text = "<b>Total Issue Card(s):</b>" + Total.ToString();
    }
    protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            string ID = e.CommandArgument.ToString();
            string Type = "Issue";
            if (e.CommandName == "Transfer")
            {
                string Msg = "";
                bool done = false;

                using (SqlConnection conn = new SqlConnection())
                {
                    string Query = "s_CardFeesData_Transfer";
                    conn.ConnectionString = ConfigurationManager.ConnectionStrings["CardDataConnectionString"].ConnectionString;

                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = Query;
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.Add("@Batch", System.Data.SqlDbType.BigInt).Value = ID;
                        cmd.Parameters.Add("@Emp", System.Data.SqlDbType.VarChar).Value = Session["EMPID"].ToString();
                        cmd.Parameters.Add("@Type", System.Data.SqlDbType.VarChar).Value =Type.ToString();

                        SqlParameter Sql_Msg = new SqlParameter("@Msg", System.Data.SqlDbType.VarChar, 255);
                        Sql_Msg.Direction = System.Data.ParameterDirection.InputOutput;
                        Sql_Msg.Value = Msg;
                        cmd.Parameters.Add(Sql_Msg);

                        SqlParameter SQL_Done = new SqlParameter("@Done", SqlDbType.Bit);
                        SQL_Done.Direction = ParameterDirection.InputOutput;
                        SQL_Done.Value = done;
                        cmd.Parameters.Add(SQL_Done);

                        cmd.Connection = conn;
                        conn.Open();

                        cmd.ExecuteNonQuery();
                        Msg = string.Format("{0}", Sql_Msg.Value);
                    }
                }
                TrustControl1.ClientMsg(Msg);
                // GridView2.DataBind();

            }        
            

        }
        catch (Exception exx) { TrustControl1.ClientMsg(exx.Message); }
        GridView1.DataBind();
    }
}